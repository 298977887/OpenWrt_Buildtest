#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (C) 2022 Ing
#


name: Build OpenWrt

on:
  schedule:
    - cron: '0 0 1/2 * *'
  repository_dispatch:
  workflow_dispatch:


env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  DIY_SHELL: diy.sh

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Generate build matrix
        id: set-matrix
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "release=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT

          # -m 所有项目以逗号分隔，并填满整行行宽
          # -B 不列出任何以 ~ 字符结束的项目
          # -Q 将条目名称括上双引号
          echo "matrix={\"config\": [$(ls -mBQ *.config)]}" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    runs-on: ubuntu-latest
    needs: matrix
    env:
      release: ${{ needs.matrix.outputs.release }}
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}

    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Init Env
      run : |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true

        sudo -E apt update
        sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
        rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt -y autoremove --purge
        sudo -E apt clean

    - name: Clone source code
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt

        cat >> openwrt/package/lean/r8125/patches/040-del-rss-log.patch << END
        --- a/src/r8125_rss.c
        +++ b/src/r8125_rss.c
        @@ -88,7 +88,7 @@ int rtl8125_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd,
                struct rtl8125_private *tp = netdev_priv(dev);
                int ret = -EOPNOTSUPP;

        -        netif_info(tp, drv, tp->dev, "rss get rxnfc\n");
        +        //netif_info(tp, drv, tp->dev, "rss get rxnfc\n");

                if (!(dev->features & NETIF_F_RXHASH))
                        return ret;
        END

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Make config
      run: |
        # $GITHUB_WORKSPACE == ${{ github.workspace }}
        cd openwrt
        [ -e $GITHUB_WORKSPACE/${{ matrix.config }} ] && cp $GITHUB_WORKSPACE/${{ matrix.config }} ./.config
        [ -e $GITHUB_WORKSPACE/$DIY_SHELL] && chmod +x $GITHUB_WORKSPACE/$DIY_SHELL; $GITHUB_WORKSPACE/$DIY_SHELL

        make defconfig

    - name: Check and Push config
      run: |
        git pull
        [ -e ${{ matrix.config }} ] && cp openwrt/.config ${{ matrix.config }}
        if [ -n "$(git status -s | grep ${{ matrix.config }})" ]; then
          git add ${{ matrix.config }}
          git commit -m "update $(date +%Y-%m-%d" "%H:%M:%S)"
          git push -f
        fi

    - name: Compile the firmware
      run: |
        cd openwrt

        echo -e "download package"
        make download -j8 V=s

        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s

        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > device_name
        [ -s device_name ] && echo "device_name=_$(cat device_name)" >> $GITHUB_ENV

    - name: Organize files
      if: success() && !cancelled()
      run: |
        df -hT
        cd openwrt/bin/targets/*/*
        ls -al

        # sed -i '/buildinfo/d; /\.bin/d; /\.manifest/d' sha256sums
        rm -rf packages *.buildinfo *.manifest *.bin sha256sums

        config=${{ matrix.config }}
        filename=${config/.config/}-${{ env.release }}.zip

        zip -q -r ${filename} *
        echo "firmware=$PWD/${filename}" >> $GITHUB_ENV

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: (!cancelled())
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release }}
        files: ${{ env.firmware }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 9

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@v0.1.0
    #   with:
    #     keep_latest: 9
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
